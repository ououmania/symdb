# This file is NOT licensed under the GPLv3, which is the license for the rest
# of YouCompleteMe.
#
# Here's the license text for this file:
#
# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org/>

import os
import os.path as p
import subprocess

database = None

DIR_OF_THIS_SCRIPT = os.path.abspath(os.path.dirname(__file__))


def get_gcc_header_path():
    include_start = "#include <...> search starts here:"
    include_end = "End of search list."
    in_include = False
    default_inc_flags = []
    try:
        f = subprocess.Popen(
            ["g++", "-E", "-x", "c++", "-v", "-"],
            stdin=subprocess.DEVNULL,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
        )
        for s in f.stdout.readlines():
            line = s.decode().strip()
            if in_include:
                if line == include_end:
                    break
                default_inc_flags.append("-I")
                default_inc_flags.append(line.strip())
            elif line == include_start:
                in_include = True
    except OSError as e:
        print(e)

    return default_inc_flags


GCC_DEFAULT_INCS = get_gcc_header_path()

PROJECT_NAME = "symdb"

flags = [
    "-Wall",
    "-Wextra",
    "-Werror",
    "-Wno-long-long",
    "-Wno-variadic-macros",
    "-Wno-unused-variable",
    "-Wno-unused-parameter",
    "-fexceptions",
    "-std=c++23",
    "-x",
    "c++",
    "-I",
    "src",
    "-I",
    "src/boost_parts",
    "-I",
    "third_party/leveldb/include",
    "-I",
    "third_party/protobuf/src/",
    "-I",
    "third_party/protobuf/third_party/abseil-cpp/",
    "-I",
    "third_party/pugixml/src/",
    "-I",
    "third_party/spdlog/include/",
    "-I",
    "_build",
] + GCC_DEFAULT_INCS


def DirectoryOfThisScript():
    return os.path.dirname(os.path.abspath(__file__))


compilation_database_folder = "" # os.path.join(DirectoryOfThisScript(), "_build")

SOURCE_EXTENSIONS = [".cpp", ".cxx", ".cc", ".c", ".m", ".mm"]


def IsHeaderFile(filename):
    extension = os.path.splitext(filename)[1]
    return extension in [".h", ".hxx", ".hpp", ".hh"]


def FindCorrespondingSourceFile(filename):
    if IsHeaderFile(filename):
        basename = p.splitext(filename)[0]
        for extension in SOURCE_EXTENSIONS:
            replacement_file = basename + extension
            if p.exists(replacement_file):
                return replacement_file
    return filename


def GetCompilationInfoForFile(filename):
    # The compilation_commands.json file generated by CMake does not have entries
    # for header files. So we do our best by asking the db for flags for a
    # corresponding source file, if any. If one exists, the flags for that file
    # should be good enough.
    if IsHeaderFile(filename):
        basename = os.path.splitext(filename)[0]
        for extension in SOURCE_EXTENSIONS:
            replacement_file = basename + extension
            if os.path.exists(replacement_file):
                compilation_info = database.GetCompilationInfoForFile(
                    replacement_file
                )
                if compilation_info.compiler_flags_:
                    return compilation_info
        return None
    return database.GetCompilationInfoForFile(filename)


# This is the entry point; this function is called by ycmd to produce flags for
# a file.
def Settings(**kwargs):
    # Do NOT import ycm_core at module scope.
    import ycm_core

    global database
    if database is None and os.path.exists(compilation_database_folder):
        database = ycm_core.CompilationDatabase(compilation_database_folder)

    language = kwargs["language"]

    if language == "cfamily":
        # If the file is a header, try to find the corresponding source file and
        # retrieve its flags from the compilation database if using one. This is
        # necessary since compilation databases don't have entries for header files.
        # In addition, use this source file as the translation unit. This makes it
        # possible to jump from a declaration in the header file to its definition
        # in the corresponding source file.
        filename = FindCorrespondingSourceFile(kwargs["filename"])

        if not database:
            return {
                "flags": flags,
                "include_paths_relative_to_dir": DIR_OF_THIS_SCRIPT,
                "override_filename": filename,
            }

        compilation_info = database.GetCompilationInfoForFile(filename)
        if not compilation_info.compiler_flags_:
            return {}

        # Bear in mind that compilation_info.compiler_flags_ does NOT return a
        # python list, but a "list-like" StringVec object.
        final_flags = list(compilation_info.compiler_flags_)

        # NOTE: This is just for YouCompleteMe; it's highly likely that your
        # project does NOT need to remove the stdlib flag. DO NOT USE THIS IN
        # YOUR ycm_extra_conf IF YOU'RE NOT 100% SURE YOU NEED IT.
        try:
            final_flags.remove("-stdlib=libc++")
        except ValueError:
            pass

        return {
            "flags": final_flags,
            "include_paths_relative_to_dir": compilation_info.compiler_working_dir_,
            "override_filename": filename,
        }

    return {}
